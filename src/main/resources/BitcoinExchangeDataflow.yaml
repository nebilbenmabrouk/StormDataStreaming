# topology definition
# name to be used when submitting
name: "${topology.name}"

# Components
# Components are analagous to Spring beans. They are meant to be used as constructor,
# property(setter), and builder arguments.
#
# for the time being, components must be declared in the order they are referenced
components:
  - id: "stringScheme"
    className: "org.apache.storm.kafka.StringScheme"

  - id: "stringMultiScheme"
    className: "org.apache.storm.spout.SchemeAsMultiScheme"
    constructorArgs:
      - ref: "stringScheme"

  - id: "zkHosts"
    className: "org.apache.storm.kafka.ZkHosts"
    constructorArgs:
      - "${kafka.zookeeper.hosts}"
#      - "172.17.0.2:2181"
# Alternative kafka config
#  - id: "kafkaConfig"
#    className: "org.apache.storm.kafka.KafkaConfig"
#    constructorArgs:
#      # brokerHosts
#      - ref: "zkHosts"
#      # topic
#      - "myKafkaTopic"
#      # clientId (optional)
#      - "myKafkaClientId"

  - id: "spoutConfig"
    className: "org.apache.storm.kafka.SpoutConfig"
    constructorArgs:
      # brokerHosts
      - ref: "zkHosts"
      # topic
      - "${message.topic}"
      # zkRoot
      - "/kafkaSpout"
      # id
      - "myId"
    properties:
      - name: "ignoreZkOffsets"
        value: false
      - name: "scheme"
        ref: "stringMultiScheme"

# topology configuration
# this will be passed to the submitter as a map of config options
#
config:
  topology.workers: 1
  topology.eventlogger.executors: 1
  # ...

# spout definitions
spouts:
  - id: "kafkaSpout"
    className: "org.apache.storm.kafka.KafkaSpout"
    constructorArgs:
      - ref: "spoutConfig"

# bolt definitions
bolts:
  - id: "BitcoinData"
    className: "org.ow2.proactive.data.streaming.bolt.BitcoinExchangeProcessing"
    parallelism: 1

  - id: "RawRate"
    className: "org.ow2.proactive.data.streaming.bolt.RawRateBolt"
    parallelism: 1

  - id: "GapAlertBolt"
    className: "org.ow2.proactive.data.streaming.bolt.GapAlertBolt"
    parallelism: 1

#  - id: "RawRate"
#    className: "org.apache.storm.flux.wrappers.bolts.FluxShellBolt"
#    constructorArgs:
      # command line
#      - ["python", "visdomRawRate.py"]
      # output fields
#      - ["rate"]
#    parallelism: 1


# - id: "splitsentence"
#    className: "org.apache.storm.flux.wrappers.bolts.FluxShellBolt"
#    constructorArgs:
      # command line
#      - ["python", "splitsentence.py"]
      # output fields
#      - ["word"]
#    parallelism: 1

#stream definitions
# stream definitions define connections between spouts and bolts.
# note that such connections can be cyclical
# custom stream groupings are also supported

streams:
  - name: "kafka --> BitcoinData" # name isn't used (placeholder for logging, UI, etc.)
    from: "kafkaSpout"
    to: "BitcoinData"
    grouping:
      type: SHUFFLE

  - name: "BitcoinData --> RawRate"
    from: "BitcoinData"
    to: "RawRate"
    grouping:
      streamId: "RawRateStream"
      type: SHUFFLE

  - name: "BitcoinData --> GapAlertBolt"
    from: "BitcoinData"
    to: "GapAlertBolt"
    grouping:
      streamId: "GapAlertStream"
      type: SHUFFLE

